[{"frontmatter":{"title":"Javascript Operators for beginners","description":"programming operators","date":"2025-05-01T00:00:00.000Z","image":"/images/posts/jsoperators.jpg","categories":["programming"],"authors":["Evatitan"],"tags":["Javascript","operator"],"draft":false},"content":"\nProgramming operators are essentials for our daily coding activities. When I first started learning a programming language, I found it difficult to remember all the English terms, so I even took a maths course on Udemy to help me become more familiar with the symbols. While this was helpful, programming operators are not the same as mathematical symbols. Therefor I share this article with you in the hope that it will help you.\n\n## Operators list\n\n| Symbol         | Name                          | Description                                      |\n|----------------|-------------------------------|--------------------------------------------------|\n| `+`            |  Addition                     | Adds two values together  |\n| `-`            |  Subtraction                  | Subtract two values |\n| `*`            |  Multiplication               | Multiples two values           | \n| `/`            |  Division                     | Division of two or more values          |\n| `%`            |  Modulo (remainder)           | Returns the remainder after dividing of two values |\n| `**`           |  Exponentiation (ES6)         | Raises a value to the power of N            |\n| `++`           |  Increment                    | Adds 1 to a value every time             |\n| `--`           |  Decrement                    | Subtracts a value by 1 every time            |\n| `=`            |  Assign                       | Assign a value to a variable           |\n| `+=`           |  Add and assign               | Adds the value on the right to the variable on the left, then assigns the result back to the variable on the left |\n| `-=`           |  Subtract and assign          | Subtracts the value on the right from the variable on the left and assigns the result back to that variable             |\n| `*=`           |  Multiplication and assign    | Multiplies the value on the right by the variable on the left and assigns the result back to that variable             |\n| `/=`           |  Division and assign          | Divides the value on the right by the value on the left and assigns the result back to the variable on the left            |\n| `%=`           |  Modulo and assign            | Returns the result of the modulo operation between two values and assign it back to the variable            |\n| `**=`          |  Exponentiation assign        | Raises a variable to the power of a value and assigns the result back to the variable.             |\n| `==`           |  Loose equality               | Compares two values to see if they are equal          |\n| `!=`           |  Loose inequality             | Compares two values to see if they are not equal              |\n| `===`          |  Strict equality              | Compares two values and their type if they are equal           |\n| `!==`          |  Strict inequality            | Compares two values and types if they are not equal           |\n| `>`            |  Greater than                 | Returns the result of the comparison if the left value is greater than the right one          |\n| `<`            |  Smaller than                 | Returns the result after comparing if the left value is smaller than the right one             |\n| `>=`           |  Greater and equality         | Returns the result after comparing if the left value is greater or equal than the right one           |\n| `<=`           |  Smaller and equality         | Returns the result after comparing if the left value is smaller or equal than the right one              |\n| `&&`           |  AND                          | Returns true only when both sides are true        |\n| `\\|\\|`         |  OR                           | Returns true when one side is true               |\n| `!`            |  NOT                          | Returns the contract value           |\n| `? :`          | Ternary (conditional)         | Returns the first value if the condition is true; otherwise, returns the second value.            |\n| `&`            | Bitwise AND                   | Performs AND on each bit of two numbers          |\n| `\\|`           | Bitwise OR                    | Performs OR on each bit of two numbers           |\n| `...`          | Spread/rest                   | Expands or collects elements/arguments           |\n\n### Examples\n<details>\n<summary>Show Addition Example</summary>\n```js\nlet a = 5;\nlet b = 3;\nlet result = a + b; // result is 8\nconsole.log(result);\n```\n</details>\n\n<details>\n<summary>Show Subtraction Example</summary>\n```js\nlet a = 5;\nlet b = 3;\nlet result = a - b; // result is 2\nconsole.log(result);\n```\n</details>\n\n<details>\n<summary>Show Multiplication Example</summary>\n```js\nlet a = 5;\nlet b = 3;\nlet result = a * b; // result is 15\nconsole.log(result);\n```\n</details>\n\n<details>\n<summary>Show Division Example</summary>\n```js\nlet a = 9;\nlet b = 3;\nlet result = a / b; // result is 3\nconsole.log(result);\n```\n</details>\n\n<details>\n<summary>Show Modulo Example</summary>\n```js\nlet a = 9;\nlet b = 3;\nlet result = a % b; // result is 0\nconsole.log(result);\n```\n</details>\n\n<details>\n<summary>Show Exponentiation Example</summary>\n```js\nlet a = 9;\nlet b = 3;\nlet result = a ** b; // result is 729\nconsole.log(result);\n```\n</details>\n\n<details>\n<summary>Show increment Example</summary>\n```js\nlet a = 9;\nlet result = a++; // result is 9\nconsole.log(result);\n```\n</details>\n\n<details>\n<summary>Show decrement Example</summary>\n```js\nlet a = 9;\nlet result = a--; // result is 9\nconsole.log(result);\n```\n</details>\n\n<details>\n<summary>Show assign Example</summary>\n```js\nlet a = 9;   // result is 9\nconsole.log(result);\n```\n</details>\n\n<details>\n<summary>Show Add and assign Example</summary>\n```js\nlet a = 9;\na += 1; // this is equal to [a = a + 1],  a is 10\nconsole.log(a);\n```\n</details>\n\n<details>\n<summary>Show Subtract and assign Example</summary>\n```js\nlet a = 9;\na -= 1; // this is equal to [a = a - 1],  a is 8\nconsole.log(a);\n```\n</details>\n\n<details>\n<summary>Show Multiplicate and assign Example</summary>\n```js\nlet a = 9;\na *= 2; // this is equal to [a = a * 2],  a is 18\nconsole.log(a);\n```\n</details>\n\n<details>\n<summary>Show Division and assign Example</summary>\n```js\nlet a = 9;\na /= 3; // this is equal to [a = a / 3],  a is 3\nconsole.log(a);\n```\n</details>\n\n<details>\n<summary>Show Modulo and assign Example</summary>\n```js\nlet a = 9;\na %= 3; // this is equal to [a = a % 3],  a is 0\nconsole.log(a);\n```\n</details>\n\n<details>\n<summary>Show Exponentiation and assign Example</summary>\n```js\nlet a = 9;\na **= 3; // this is equal to [a ** 3],  a is 729\nconsole.log(a);\n```\n</details>\n\n<details>\n<summary>Show Loose equality Example</summary>\n```js\nlet a = 9;\nlet b = \"9\";\nconsole.log(a==b);  // true\n```\n</details>\n\n<details>\n<summary>Show loose inequality Example</summary>\n```js\nlet a = 9;\nlet b = 8;\nconsole.log(a!=b);  // true\n```\n</details>\n\n<details>\n<summary>Show Strict equality Example</summary>\n```js\nlet a = 9;\nlet b = \"9\";\nconsole.log(a===b);  // false\n```\n</details>\n\n<details>\n<summary>Show Strict inequality Example</summary>\n```js\nlet a = 9;\nlet b = 8;\nconsole.log(a!==b);  // true\n```\n</details>\n\n<details>\n<summary>Show Greater than Example</summary>\n```js\nlet a = 9;\nlet b = 8;\nconsole.log(a > b);  // true\n```\n</details>\n\n<details>\n<summary>Show Smaller than Example</summary>\n```js\nlet a = 9;\nlet b = 8;\nconsole.log(b < a);  // true\n```\n</details>\n\n<details>\n<summary>Show Greater and equal Example</summary>\n```js\nlet a = 9;\nlet b = 9;\nlet c = 8;\nconsole.log(a >= b);  // true\nconsole.log(a >= c);  // true\n```\n</details>\n\n<details>\n<summary>Show Smaller and equal Example</summary>\n```js\nlet a = 9;\nlet b = 9;\nlet c = 8;\nconsole.log(b <= a);  // true\nconsole.log(c <= a);  // true\n```\n</details>\n\n<details>\n<summary>Show ADD Example</summary>\n```js\nlet a = true;\nlet b = false;\nconsole.log( a && b );  // false\n```\n</details>\n\n<details>\n<summary>Show OR Example</summary>\n```js\nlet a = true;\nlet b = false;\nconsole.log( a || b );  // true\n```\n</details>\n\n<details>\n<summary>Show NOT Example</summary>\n```js\nlet a = true;\nconsole.log(!a);  // false\n```\n</details>\n\n<details>\n<summary>Show Ternary Example</summary>\n```js\nlet a = true;\nlet b = 1;\nlet c = 2;\nlet result = a ? b : c\nconsole.log(result); \n```\n</details>\n\n<details>\n<summary>Show Ternary Example</summary>\n```js\nlet a = true;\nlet b = 1;\nlet c = 2;\nlet result = a ? b : c\nconsole.log(result); \n```\n</details>\n\n<details>\n<summary>Show Bitwise AND Example</summary>\n```js\nlet a = 5;  // binary: 0101\nlet b = 3;  // binary: 0011\nlet result = a & b;  // result is 1 (binary: 0001)\nconsole.log(result);  // Output: 1\n```\n</details>\n\n<details>\n<summary>Show Bitwise OR Example</summary>\n```js\nlet a = 5;   // binary: 0101\nlet b = 3;   // binary: 0011\nlet result = a | b; // result is 7 (binary: 0111)\nconsole.log(result); // Output: 7\n```\n</details>\n\n<details>\n<summary>Show Spread/Rest Example</summary>\n```js\nlet a = [1,2,3]\nlet b = [...a, 4 , 5] // b is [1, 2, 3, 4, 5]\nconsole.log(b);\n```\n</details>\n\n\n\n## Others Operators List\n\n<details>\n<summary>Show List</summary>\n\nHere are some additional common JavaScript operators\n\n| Symbol         | Name                          | Description                                      |\n|----------------|-------------------------------|--------------------------------------------------|\n| `^`            | Bitwise XOR                   | Performs XOR on each bit of two numbers          |\n| `~`            | Bitwise NOT                   | Inverts each bit                                 |\n| `<<`           | Bitwise left shift            | Shifts bits to the left                          |\n| `>>`           | Bitwise right shift           | Shifts bits to the right                         |\n| `>>>`          | Bitwise unsigned right shift  | Shifts bits to the right, filling with zeros     |\n| `typeof`       | Type determination            | Returns the type of a variable                   |\n| `instanceof`   | Instance check                | Checks if object is an instance of a constructor |\n| `delete`       | Delete property               | Removes a property from an object                |\n| `void`         | Void                          | Evaluates expression and returns undefined       |\n| `new`          | Object instantiation          | Creates an instance of an object                 |\n| `in`           | Property existence            | Checks if property exists in an object           |\n\n</details>\n","slug":"post-1"},{"frontmatter":{"title":"Coding Terminology for web developers","description":"Coding Terminology ","date":"2025-05-10T00:00:00.000Z","image":"/images/posts/coding-terms.jpg","categories":["programming"],"authors":["Evatitan"],"tags":["terms"],"draft":false},"content":"\nFor any of non-native English-speakers programmers, seeing coding terms for the first time can be intimidating. This is not only because they are technical terms but also because they can seem a little abstract at first. There are so many of them! So I created this coding terms outline for myself and others coders.\n\n# Coding Terminology\n\n## JavaScript terms \n\n| Term  | Definition  | Chinese |\n|-------|-------------|---------|\n| Event delegation      | A technique of handling events at a higher level in the DOM rather than on individual elements            | 事件委托，在父元素上处理子元素事件         |\n| IIFE (Immediately Invoked Function Expression)       | A function that runs as soon as it is defined            | 立即执行函数表达式，定义后立即运行的函数         |\n| Temporal Dead Zone      | The period between entering scope and variable declaration where variables can not be accessed             |  暂时性死区，变量声明前不可访问的区域        |\n| Call Stack       | The mechanism for keep track of function calls in JS            | 调用栈，跟踪函数调用的机制        |\n| Microtask | A type of task that executes after the currently executing script and before rendering or others tasks | 微任务，紧接当前脚本后执行的任务  |\n| Macrotask | A type of task executes after Microtask, such as setTimeout or setInterval | 宏任务，如 setTimeout/setInterval 等  |\n| Iterator  |An object that defines a sequence and potentially a return value upon its completion.  |迭代器，定义序列及返回值的对象  |\n| Async Iterator      | An iterator that returns Promises, allowing for asynchronous iteration.     | 异步迭代器，返回 Promise 的迭代器           |\n| Module Resolution   | The process by which JavaScript determines what code to load for an import or require. | 模块解析，确定导入/require 加载内容的过程   |\n| Dynamic Import      | Importing modules dynamically at runtime using `import()`.                  | 动态导入，运行时使用 import() 加载模块       |\n| Call Apply Bind     | Methods for controlling function invocation and context (`this`).           | call/apply/bind，控制函数调用和 this 的方法  |\n| Context (this)      | The value of `this` keyword in different execution contexts.                | 上下文（this），不同执行环境下的 this 值     |\n| Optional Chaining   | A syntax (`?.`) for accessing deeply nested properties safely.              | 可选链，安全访问深层属性的语法               |\n| Nullish Coalescing  | A syntax (`??`) for providing a default value when the left operand is null or undefined. | 空值合并运算符，左侧为 null/undefined 时提供默认值 |\n| BigInt              | A built-in object for representing integers with arbitrary precision.        | BigInt，表示任意精度整数的内置对象           |\n| Intl API            | JavaScript Internationalization API for formatting dates, numbers, etc.      | Intl API，国际化相关的内置 API               |\n| Hot Reload          | Automatically reloading code changes in a running application without a full restart. | 热重载，代码变更自动刷新                    |\n| Code Splitting      | Breaking up code into smaller chunks that can be loaded on demand.           | 代码分割，按需加载代码块                     |\n| Lazy Loading        | Loading resources only when they are needed to improve performance.           | 懒加载，仅在需要时加载资源                   |\n| SSR Hydration       | The process of attaching event listeners to server-rendered HTML on the client. | SSR 水合，将事件监听器附加到服务端渲染 HTML  |\n| Static Site Generation (SSG) | Generating HTML pages at build time instead of on each request.     | 静态站点生成，构建时生成 HTML 页面           |\n| Universal/Isomorphic JS | JavaScript code that runs both on the client and the server.             | 通用/同构 JS，前后端均可运行的 JS            |\n| Middleware Stack    | A sequence of middleware functions that process requests/responses in web frameworks. | 中间件栈，依次处理请求/响应的中间件函数      |\n| Dependency Graph    | A representation of how modules or components depend on each other.          | 依赖图，模块或组件之间依赖关系的表示         |\n| Dependency Injection| A design pattern for providing dependencies to objects or functions.          | 依赖注入，向对象或函数提供依赖的设计模式     |\n| Message Queue       | A system for exchanging messages between processes or services asynchronously. | 消息队列，异步交换消息的系统                 |\n| Pub/Sub (Publish/Subscribe) | A messaging pattern where senders (publishers) do not program messages to be sent directly to receivers (subscribers). | 发布/订阅，发送者与接收者解耦的消息模式      |\n| Middleware          | Functions that process requests and responses in web frameworks.              | 中间件，处理请求和响应的函数                 |\n| Rollback            | Reverting to a previous stable version after a failed deployment.             | 回滚，部署失败后恢复到稳定版本               |\n| API Versioning      | Managing changes to an API by creating multiple versions.                     | API 版本管理，通过多个版本管理 API 变更       |\n| Shadow Deployment   | Deploying a new version of an application alongside the old one to test in production without affecting users. | 影子部署，与旧版本并行测试新版本             |\n| Sticky Session      | Ensuring a user's requests are always routed to the same server in a load-balanced environment. | 粘性会话，负载均衡环境下请求总路由到同一服务器 |\n| Monitoring          | Continuously observing a system’s health and performance.                     | 监控，持续观察系统健康和性能                 |\n| Alerting            | Notifying operators or systems when certain conditions are met.               | 告警，条件满足时通知运维或系统               |\n| Log Aggregation     | Collecting and centralizing logs from multiple sources for analysis.          | 日志聚合，集中收集和分析日志                 |\n| Metrics             | Quantitative measurements used to assess system performance or health.        | 指标，衡量系统性能或健康的量化数据           |\n| SLA (Service Level Agreement) | A contract that defines the expected level of service between a provider and a customer. | 服务级别协议，定义服务期望水平的合同         |\n| SLO (Service Level Objective) | A specific measurable characteristic of the SLA, such as uptime or response time. | 服务级别目标，SLA 的具体可衡量特性           |\n| SLI (Service Level Indicator) | A metric used to measure compliance with an SLO.                     | 服务级别指标，衡量 SLO 达成度的指标          |\n| Non-blocking        | Operations that do not block program execution while waiting for tasks to complete. | 非阻塞，等待任务时不会阻塞程序执行         |\n| Single Main Thread  | A program architecture where one main thread handles all tasks (common in JavaScript). | 单主线程，所有任务由一个主线程处理         |\n| Polyfill            | Code that implements a feature on web browsers that do not support it natively. | Polyfill，为旧浏览器实现新特性的代码        |\n| Transpiler          | A tool that converts code from one language or version to another.         | 转译器，将代码转换为另一种语言或版本         |\n| Source Map          | A file that maps compiled code back to its original source code.           | Source Map，映射编译后代码到源代码的文件     |\n| Tree Shaking        | A process of removing unused code during the build process.                | Tree Shaking，构建时移除未使用代码           |\n| Set                 | A collection of unique values.                                              | Set，唯一值的集合                           |\n| Map                 | A collection of key-value pairs with keys of any type.                       | Map，任意类型键的键值对集合                  |\n\n\n<details>\n\n<summary>React terms</summary>\n\n| Term                        | Definition                                                                 | 中文解释                                   |\n|-----------------------------|----------------------------------------------------------------------------|--------------------------------------------|\n| Higher-order Component (HOC)| A function in React that takes a component and returns a new component with added functionality. | 高阶组件，增强组件功能的函数         |\n| Lift State Up               | Moving shared state to a common ancestor component in React to manage data flow. | 状态提升，提升到共同父组件管理数据     |\n| JSX                         | A syntax extension for JavaScript that looks similar to XML/HTML and is used with React to describe UI. | JSX，React 用于描述界面的语法扩展      |\n| Props                       | Inputs to a React component, passed in as attributes.                        | Props，传递给组件的输入属性                |\n| State                       | Data managed within a React component that can change over time.              | State，组件内部可变的数据                  |\n| useState                    | A React Hook for adding state to functional components.                      | useState，给函数组件添加状态的 Hook         |\n| useEffect                   | A React Hook for performing side effects in functional components.            | useEffect，处理副作用的 Hook                |\n| useContext                  | A React Hook for accessing context values in functional components.           | useContext，访问上下文的 Hook               |\n| useRef                      | A React Hook for persisting values across renders without causing re-renders. | useRef，跨渲染持久化值的 Hook               |\n| useMemo                     | A React Hook for memoizing expensive calculations.                           | useMemo，缓存计算结果的 Hook                |\n| useCallback                 | A React Hook for memoizing callback functions.                               | useCallback，缓存回调函数的 Hook            |\n| Context                     | A way to pass data through the component tree without having to pass props down manually at every level. | Context，无需逐层传递 props 的数据共享方式   |\n| Component                   | A reusable piece of UI in React, either a function or class.                  | 组件，React 中可复用的 UI 单元              |\n| Controlled Component        | A component whose form data is handled by React state.                        | 受控组件，表单数据由 React 状态管理         |\n| Uncontrolled Component      | A component that manages its own state internally via the DOM.                | 非受控组件，表单数据由 DOM 自己管理          |\n| Fragment                    | A way to group multiple elements without adding extra nodes to the DOM.       | Fragment，分组多个元素但不增加 DOM 节点      |\n| Portal                      | Rendering a child into a DOM node outside the parent component hierarchy.     | Portal，将子元素渲染到父组件层级外的 DOM 节点|\n| Error Boundary              | A React component that catches JavaScript errors anywhere in its child component tree. | 错误边界，捕获子组件树错误的组件           |\n| Reconciliation              | The process React uses to update the DOM efficiently.                         | 协调，React 高效更新 DOM 的过程             |\n| Virtual DOM                 | An in-memory representation of the real DOM used by React for efficient updates. | 虚拟 DOM，React 用于高效更新的内存 DOM      |\n| Key                         | A special string attribute used to identify elements in a list.               | Key，列表元素唯一标识符                     |\n| Prop Drilling               | Passing data through many nested components via props.                        | Prop Drilling，通过多层组件传递 props        |\n| Render Props                | A technique for sharing code between React components using a prop whose value is a function. | Render Props，通过函数 prop 共享代码         |\n| PureComponent               | A React component that only re-renders when its props or state change.        | PureComponent，仅在 props 或 state 变化时重新渲染的组件 |\n| Memoization                 | Optimization technique to avoid unnecessary renders by caching results.        | 记忆化，缓存结果以避免不必要的渲染           |\n| React Router                | A library for handling routing in React applications.                         | React Router，React 应用的路由库             |\n| Redux                       | A state management library often used with React.                             | Redux，常与 React 配合使用的状态管理库       |\n| React Fiber                 | The new reconciliation engine in React 16+ for incremental rendering.          | React Fiber，React 16+ 的新协调引擎          |\n| Synthetic Event             | A cross-browser wrapper around the browser’s native event.                     | 合成事件，跨浏览器的事件封装                 |\n| StrictMode                  | A tool for highlighting potential problems in an application.                   | StrictMode，突出潜在问题的工具               |\n\n</details>\n\n<details>\n\n<summary>Browser terms</summary>\n\n| Term                        | Definition                                                                 | 中文解释                                   |\n|-----------------------------|----------------------------------------------------------------------------|--------------------------------------------|\n| SSR Hydration               | The process of attaching event listeners to server-rendered HTML on the client. | SSR 水合，将事件监听器附加到服务端渲染 HTML  |\n| Static Site Generation (SSG)| Generating HTML pages at build time instead of on each request.             | 静态站点生成，构建时生成 HTML 页面           |\n| Universal/Isomorphic JS     | JavaScript code that runs both on the client and the server.                | 通用/同构 JS，前后端均可运行的 JS            |\n| Search Engine Optimization (SEO) | Techniques to improve a website’s visibility in search engine results. | 搜索引擎优化，提升网站在搜索引擎中的可见性   |\n| Cross-Site Scripting (XSS)  | A security vulnerability allowing attackers to inject malicious scripts into web pages. | 跨站脚本攻击，允许攻击者注入恶意脚本         |\n\n\n</details>\n\n\n<details>\n\n<summary>Database terms</summary>\n\n| Term                        | Definition                                                                 | 中文解释                                   |\n|-----------------------------|----------------------------------------------------------------------------|--------------------------------------------|\n| Data-intensive              | Applications that process or handle large volumes of data.                 | 数据密集型，处理大量数据的应用               |\n| Sharding                    | Splitting a database into smaller, faster, more easily managed parts called shards. | 分片，将数据库拆分为更小的部分              |\n| Consistent Hashing          | A technique to distribute data across a cluster to minimize reorganization. | 一致性哈希，分布式数据分配技术              |\n| Time Series Database        | A database optimized for time-stamped or time series data.                 | 时序数据库，优化存储时间序列数据            |\n| Graph Database              | A database that uses graph structures for semantic queries.                | 图数据库，使用图结构进行查询                |\n| Data Lake                   | A centralized repository for storing all structured and unstructured data at any scale. | 数据湖，集中存储结构化和非结构化数据        |\n| Data Warehouse              | A system used for reporting and data analysis, storing structured data from multiple sources. | 数据仓库，用于分析和报告的结构化数据存储    |\n| ETL                         | Extract, Transform, Load – a process in data warehousing.                  | ETL，数据抽取、转换和加载过程               |\n| Migration                   | The process of changing a database schema over time.                       | 迁移，数据库结构变更过程                    |\n| ACID                        | A set of properties guaranteeing reliable database transactions.            | ACID，保证数据库事务可靠性的属性            |\n| Index                       | A database structure that improves the speed of data retrieval.             | 索引，提高数据库查询速度                    |\n| Query                       | A request for data or information from a database.                          | 查询，向数据库请求数据                      |\n\n</details>\n\n\n<details>\n\n<summary>Git terms</summary>\n\n| Term                | Definition                                                                 | 中文解释                                   |\n|---------------------|----------------------------------------------------------------------------|--------------------------------------------|\n| Fork                | Creating a personal copy of someone else's repository.                     | 派生，复制他人仓库到自己账户                |\n| Pull Request (PR)   | A request to merge changes from one branch or fork into another.           | 拉取请求，合并分支或派生仓库的更改           |\n| Push                | Uploading local commits to a remote repository.                            | 推送，将本地提交上传到远程仓库               |\n| Pull                | Fetching and integrating changes from a remote repository.                  | 拉取，从远程仓库获取并合并更改               |\n| Fetch               | Downloading new data from a remote repository without integrating it.      | 获取，仅下载远程仓库的新数据                 |\n| Stash               | Temporarily saving changes that are not ready to be committed.             | 贮藏，临时保存未提交的更改                   |\n| Tag                 | Marking a specific commit as important (e.g., for releases).               | 标签，给 Docker 镜像打的版本标记            |\n| Conflict            | A situation where changes from different sources cannot be automatically merged. | 冲突，不同更改无法自动合并               |\n| .gitignore          | A file specifying which files and directories to ignore in a repository.   | .gitignore，指定仓库忽略的文件和目录         |\n| Blame               | Showing who last modified each line of a file.                             | 追溯，显示每行代码的最后修改者               |\n| Cherry-pick         | Applying a specific commit from one branch onto another branch.            | 拣选，将某个提交应用到另一个分支             |\n| Revert              | Creating a new commit that undoes the changes of a previous commit.        | 撤销，生成新提交以还原先前更改               |\n| Reset               | Moving the current branch to a specific commit, optionally modifying the index and working directory. | 重置，将分支指向特定提交                   |\n| HEAD                | The current commit your working directory is based on.                     | HEAD，当前工作目录所基于的提交               |\n| Upstream            | The main repository or branch that your branch tracks.                     | 上游，分支所跟踪的主仓库或主分支             |\n| Detached HEAD       | A state where HEAD points directly to a commit instead of a branch.        | 游离 HEAD，HEAD 直接指向提交而非分支         |\n| Fast-forward        | A type of merge that moves the branch pointer forward without creating a merge commit. | 快进合并，不产生合并提交的合并方式      |\n| Submodule           | A repository embedded inside another repository.                            | 子模块，嵌套在另一个仓库中的仓库             |\n| Reflog              | A log of where your HEAD and branch references have been.                  | Reflog，HEAD 和分支引用的历史记录            |\n\n</details>\n\n\n\n<details>\n\n<summary>Docker terms</summary>\n\n\n| Term                | Definition                                                                 | 中文解释                                   |\n|---------------------|----------------------------------------------------------------------------|--------------------------------------------|\n| Docker              | A platform for developing, shipping, and running applications in containers.| Docker，容器化平台                          |\n| Container           | A lightweight, standalone, executable package that includes everything needed to run a piece of software. | 容器，包含运行软件所需全部内容的轻量包 |\n| Dockerfile          | A text file with instructions to build a Docker image.                      | Dockerfile，构建镜像的指令文件              |\n| Image               | A read-only template used to create containers.                             | 镜像，用于创建容器的只读模板                |\n| Registry            | A storage and distribution system for Docker images (e.g., Docker Hub).     | 镜像仓库，存储和分发 Docker 镜像的系统      |\n| Docker Hub          | The default public registry for Docker images.                              | Docker Hub，默认的公共镜像仓库              |\n| Build               | The process of creating a Docker image from a Dockerfile.                   | 构建，从 Dockerfile 创建镜像的过程           |\n| Pull                | Downloading a Docker image from a registry.                                 | 拉取，从仓库下载 Docker 镜像                |\n| Push                | Uploading a Docker image to a registry.                                     | 推送，将 Docker 镜像上传到仓库              |\n| Run                 | Creating and starting a new container from an image.                        | 运行，从镜像创建并启动新容器                |\n| Volume              | A persistent storage mechanism for Docker containers.                       | 卷，Docker 容器的数据持久化机制             |\n| Network             | A way for Docker containers to communicate with each other and the outside world. | 网络，容器间及与外部通信的方式         |\n| Bind Mount          | Mounting a file or directory from the host into a container.                | 绑定挂载，将主机文件或目录挂载到容器        |\n| Port Mapping        | Exposing container ports to the host machine.                               | 端口映射，将容器端口暴露给主机              |\n| Compose             | A tool for defining and running multi-container Docker applications.         | Compose，定义和运行多容器应用的工具         |\n| docker-compose.yml  | The configuration file for Docker Compose.                                  | docker-compose.yml，Compose 配置文件        |\n| Swarm               | Docker's native clustering and orchestration solution.                      | Swarm，Docker 原生集群和编排方案            |\n| Orchestration       | Automated management of containerized applications (e.g., scaling, failover).| 编排，自动管理容器应用（如扩缩容、故障转移）|\n| ENTRYPOINT          | The command that is always executed when a container starts.                 | ENTRYPOINT，容器启动时始终执行的命令        |\n| CMD                 | The default command to run when a container starts, can be overridden.       | CMD，容器启动时的默认命令，可被覆盖         |\n| Layer               | Each instruction in a Dockerfile creates a new layer in the image.           | 层，Dockerfile 每条指令生成的镜像层         |\n| Tag                 | A label applied to a Docker image for versioning.                            | 标签，给 Docker 镜像打的版本标记            |\n| Healthcheck         | A command in Dockerfile to check container health.                           | 健康检查，检测容器健康状态的命令            |\n| ENTRYPOINT vs CMD   | ENTRYPOINT is always executed; CMD provides default arguments for ENTRYPOINT.| ENTRYPOINT 总是执行，CMD 提供默认参数        |\n\n\n</details>\n\n\n<details>\n\n<summary>Operating System terms</summary>\n\n| Term        | Definition                                               | 中文解释                   |\n|-------------|----------------------------------------------------------|----------------------------|\n| Operating System (OS) | System software that manages hardware and software resources. | 操作系统，管理硬件和软件资源的系统 |\n| Windows     | A widely used operating system developed by Microsoft.   | Windows，微软开发的操作系统 |\n| Linux       | An open-source, Unix-like operating system.              | Linux，开源类 Unix 操作系统 |\n| macOS       | The operating system developed by Apple for Mac computers.| macOS，苹果公司为 Mac 开发的操作系统 |\n| Kernel      | The core part of an operating system, managing resources and communication between hardware and software. | 内核，操作系统的核心部分，管理资源和软硬件通信 |\n| Shell       | A user interface for access to an operating system's services. | Shell，操作系统的命令行界面 |\n| File System | The method and data structure that an OS uses to control how data is stored and retrieved. | 文件系统，操作系统用于管理数据存储和检索的方法和结构 |\n| Process     | An instance of a running program.                        | 进程，正在运行的程序实例    |\n| Thread      | The smallest unit of processing that can be scheduled by an OS. | 线程，操作系统可调度的最小处理单元 |\n| Bash        | A popular Unix shell and command language.               | Bash，流行的 Unix Shell 和命令语言 |\n| Command Line| A text-based interface for interacting with the OS.      | 命令行，与操作系统交互的文本界面 |\n\n</details>\n\n\n\n<details>\n\n<summary>Advanced IT Terms</summary>\n\n| Term                | Definition                                                                 | 中文解释                                   |\n|---------------------|----------------------------------------------------------------------------|--------------------------------------------|\n| CAP Theorem         | States that a distributed system can only guarantee two of Consistency, Availability, Partition tolerance. | CAP 定理，分布式系统一致性、可用性、分区容忍性三选二 |\n| Sharding            | Splitting a database into smaller, faster, more easily managed parts called shards. | 分片，将数据库拆分为更小的部分              |\n| Consistent Hashing  | A technique to distribute data across a cluster to minimize reorganization. | 一致性哈希，分布式数据分配技术              |\n| Distributed Lock    | A mechanism to synchronize access to resources across multiple systems.     | 分布式锁，跨系统同步资源访问的机制           |\n| Leader Election     | A process in distributed systems to designate a single node as the organizer. | 选主，分布式系统中选出唯一主节点            |\n| Raft                | A consensus algorithm for managing a replicated log.                       | Raft，共识算法，用于管理复制日志             |\n| Paxos               | A family of protocols for solving consensus in a network of unreliable processors. | Paxos，分布式一致性协议                  |\n| Saga Pattern        | A pattern for managing distributed transactions using a sequence of local transactions. | Saga 模式，分布式事务管理模式             |\n| Immutable Infrastructure | Infrastructure that is never modified after deployment.                | 不可变基础设施，部署后不再修改的基础设施     |\n| Serverless          | A cloud-computing model where the cloud provider runs the server, and dynamically manages the allocation of machine resources. | 无服务器架构，云平台自动管理资源            |\n| Edge Computing      | Processing data near the source of data generation rather than in a centralized data center. | 边缘计算，在数据源附近处理数据              |\n| Data Lake           | A centralized repository for storing all structured and unstructured data at any scale. | 数据湖，集中存储结构化和非结构化数据        |\n| Data Warehouse      | A system used for reporting and data analysis, storing structured data from multiple sources. | 数据仓库，用于分析和报告的结构化数据存储    |\n| ETL                 | Extract, Transform, Load – a process in data warehousing.                   | ETL，数据抽取、转换和加载过程               |\n| Data Pipeline       | A set of processes that move data from one system to another, often transforming it along the way. | 数据管道，数据流转和处理流程               |\n| Container Orchestration | Automated management of containerized applications (e.g., Kubernetes).  | 容器编排，自动管理容器应用（如 Kubernetes）  |\n| Kubernetes          | An open-source system for automating deployment, scaling, and management of containerized applications. | Kubernetes，容器编排系统                   |\n| Service Discovery   | Automatically detecting devices and services on a network.                  | 服务发现，自动检测网络中的服务               |\n| API Rate Limiting   | Restricting the number of API requests a client can make in a given time.   | API 限流，限制客户端请求频率                 |\n| WebAssembly (WASM)  | A binary instruction format for a stack-based virtual machine, enabling high-performance apps on the web. | WebAssembly，Web 高性能二进制格式           |\n| Progressive Web App (PWA) | Web apps that use modern web capabilities to deliver an app-like experience. | 渐进式 Web 应用，具备原生体验的网页应用    |\n| Content Security Policy (CSP) | A security standard to prevent cross-site scripting and other attacks. | 内容安全策略，防止 XSS 等攻击              |\n| OAuth2.0            | An authorization framework enabling third-party applications to obtain limited access to user accounts. | OAuth2.0，第三方授权框架                   |\n| OpenID Connect      | An authentication layer on top of OAuth 2.0.                                | OpenID Connect，基于 OAuth2.0 的认证层      |\n| SSO (Single Sign-On)| A session/user authentication process that permits a user to use one set of login credentials for multiple applications. | 单点登录，多个应用共用一套登录凭证         |\n| RBAC (Role-Based Access Control) | Restricting system access to authorized users based on roles.     | 基于角色的访问控制，根据角色限制访问        |\n| DDoS (Distributed Denial of Service) | An attack where multiple systems flood the bandwidth or resources of a targeted system. | 分布式拒绝服务攻击，多系统联合攻击目标      |\n| CDN Edge Node       | A server in a CDN network that caches content closer to users.               | CDN 边缘节点，靠近用户的缓存服务器           |\n| Hybrid Cloud        | A computing environment that uses a mix of on-premises, private cloud and public cloud services. | 混合云，结合本地和云服务的环境             |\n| Multi-Cloud         | The use of multiple cloud computing services in a single architecture.        | 多云，单一架构中使用多个云服务              |\n| Immutable Data Structure | Data structures that cannot be changed after creation.                   | 不可变数据结构，创建后不可更改的数据结构     |\n| Eventual Consistency | A consistency model used in distributed computing to achieve high availability. | 最终一致性，分布式系统中的一致性模型        |\n| Time Series Database | A database optimized for time-stamped or time series data.                   | 时序数据库，优化存储时间序列数据            |\n| Graph Database      | A database that uses graph structures for semantic queries.                   | 图数据库，使用图结构进行查询                |\n| Blockchain          | A distributed ledger technology for securely recording transactions.           | 区块链，分布式账本技术                      |\n| Quantum Computing   | Computing using quantum-mechanical phenomena, such as superposition and entanglement. | 量子计算，利用量子力学现象的计算方式      |\n| Homomorphic Encryption | Encryption that allows computation on ciphertexts, generating an encrypted result. | 同态加密，可在密文上直接计算                |\n| Federated Learning  | A machine learning technique that trains an algorithm across multiple decentralized devices. | 联邦学习，分布式设备协同训练算法           |\n| A/B Testing         | Comparing two versions of a web page or app to see which performs better.      | A/B 测试，对比两种版本的效果                |\n| Feature Flag        | A technique to enable or disable features without deploying new code.          | 功能开关，不用重新部署即可控制功能           |\n| Blue/Green Deployment | A release management strategy that reduces downtime and risk by running two identical production environments. | 蓝绿部署，两个环境切换发布                  |\n| Chaos Monkey        | A tool that randomly disables production instances to test system resilience.   | 混沌猴，随机破坏实例以测试系统韧性           |\n| Circuit Breaker Pattern | A design pattern to prevent repeated failures in distributed systems.      | 断路器模式，防止分布式系统反复故障           |\n| Service Mesh        | A dedicated infrastructure layer for handling service-to-service communication. | 服务网格，服务间通信的基础设施层           |\n| Sidecar Pattern     | Deploying supporting components of an application as a separate process or container. | Sidecar 模式，辅助组件独立部署              |\n| Zero Trust Security | Security model that assumes no implicit trust, verifying everything.        | 零信任安全，默认不信任任何访问              |\n| Observability Pipeline | The tooling and processes for collecting, processing, and analyzing logs, metrics, and traces. | 可观测性管道，收集和分析日志、指标、追踪的流程 |\n| Tracing             | Tracking the flow of requests through distributed systems.                  | 链路追踪，跟踪分布式系统中的请求流           |\n| Monitoring          | Continuously observing a system’s health and performance.                   | 监控，持续观察系统健康和性能                 |\n| Alerting            | Notifying operators or systems when certain conditions are met.             | 告警，条件满足时通知运维或系统               |\n| Log Aggregation     | Collecting and centralizing logs from multiple sources for analysis.        | 日志聚合，集中收集和分析日志                 |\n| Metrics             | Quantitative measurements used to assess system performance or health.      | 指标，衡量系统性能或健康的量化数据           |\n| SLA (Service Level Agreement) | A contract that defines the expected level of service between a provider and a customer. | 服务级别协议，定义服务期望水平的合同         |\n| SLO (Service Level Objective) | A specific measurable characteristic of the SLA, such as uptime or response time. | 服务级别目标，SLA 的具体可衡量特性           |\n| SLI (Service Level Indicator) | A metric used to measure compliance with an SLO.                   | 服务级别指标，衡量 SLO 达成度的指标          |\n| Rollback            | Reverting to a previous stable version after a failed deployment.           | 回滚，部署失败后恢复到稳定版本               |\n| Feature Toggle/Flag | A technique to enable or disable features without deploying new code.       | 功能开关，不用重新部署即可控制功能           |\n| Canary Deployment   | Gradually rolling out a new software version to a small subset of users before a full rollout. | 金丝雀部署，逐步发布新版本         |\n| Blue/Green Deployment | A release management strategy that reduces downtime and risk by running two identical production environments. | 蓝绿部署，两个环境切换发布         |\n| Shadow Deployment   | Deploying a new version of an application alongside the old one to test in production without affecting users. | 影子部署，与旧版本并行测试新版本    |\n| Shadow Traffic      | Sending a copy of production traffic to a new system for testing without impacting users. | 影子流量，生产流量副本用于测试      |\n| Sticky Session      | A method to ensure a user's requests are always routed to the same server in a load-balanced environment. | 粘性会话，负载均衡环境下请求总路由到同一服务器 |\n| Service Registry    | A database or directory of available services in a microservices architecture. | 服务注册表，微服务架构中的服务目录  |\n| Data-intensive      | Applications that process or handle large volumes of data.                  | 数据密集型，处理大量数据的应用               |\n| Cloud-native Application | Apps designed to run in cloud environments, leveraging scalability and resilience features. | 云原生应用，专为云环境设计的应用            |\n| Bootstrap Abstraction | Extracting repeated setup/config logic into reusable layers to simplify code and improve reuse. | 启动抽象，提取重复配置逻辑以简化和复用代码   |\n| I/O Framework       | Tools/libraries for handling input/output (e.g., files, network, user input). | I/O 框架，处理输入输出的工具或库            |\n| Event-driven Programming | Programming paradigm where events trigger actions via listeners and emitters, often for async tasks. | 事件驱动编程，事件触发动作的编程范式         |\n\n</details>","slug":"post-2"},{"frontmatter":{"title":"What you need to know about Photography","description":"meta description","date":"2022-06-02T00:00:00.000Z","image":"/images/posts/03.jpg","categories":["art"],"authors":["Mark Dinn"],"tags":["diy","toy"],"draft":true},"content":"\nNemo vel ad consectetur namut rutrum ex, venenatis sollicitudin urna. Aliquam erat volutpat. Integer eu ipsum sem. Ut bibendum lacus vestibulum maximus suscipit. Quisque vitae nibh iaculis neque blandit euismod.\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\n\n## Creative Design\n\nNam ut rutrum ex, venenatis sollicitudin urna. Aliquam erat volutpat. Integer eu ipsum sem. Ut bibendum lacus vestibulum maximus suscipit. Quisque vitae nibh iaculis neque blandit euismod.\n\n> Lorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\n","slug":"post-3demo"},{"frontmatter":{"title":"Why a balloon is a flexible bag that can be inflated with a gas","description":"meta description","image":"/images/posts/04.jpg","date":"2021-02-02T00:00:00.000Z","draft":true,"authors":["Mark Dinn"],"tags":["Balloon","Gas"],"categories":["Accessories"]},"content":"\nA balloon is a flexible bag that can be inflated with a gas, such as helium, hydrogen, nitrous oxide, oxygen, and air. For special tasks, balloons can be filled with smoke, liquid water, granular media, or light sources.\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\n\n### Creative Design\n\nNam ut rutrum ex, venenatis sollicitudin urna. Aliquam erat volutpat. Integer eu ipsum sem. Ut bibendum lacus vestibulum maximus suscipit. Quisque vitae nibh iaculis neque blandit euismod.\n\n>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\n","slug":"post-4demo"},{"frontmatter":{"title":"Banana is the best meal packages in the UK spark outrage online","description":"meta description","image":"/images/posts/05.jpg","date":"2021-01-25T00:00:00.000Z","draft":true,"authors":["John Doe"],"tags":["Food","Gold"],"categories":["Food"]},"content":"\nA banana is an elongated, edible fruit – botanically a berry – produced by several kinds of large herbaceous flowering plants in the genus Musa. In some countries, bananas used for cooking may be called \"plantains\", distinguishing them from dessert bananas.\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\n\n### Creative Design\n\nNam ut rutrum ex, venenatis sollicitudin urna. Aliquam erat volutpat. Integer eu ipsum sem. Ut bibendum lacus vestibulum maximus suscipit. Quisque vitae nibh iaculis neque blandit euismod.\n\n>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\n","slug":"post-5demo"},{"frontmatter":{"title":"Become a morning person with the help of this a alarm clock","description":"meta description","image":"/images/posts/06.jpg","date":"2021-02-03T00:00:00.000Z","draft":true,"authors":["Mark Dinn"],"tags":["Alarm","Clock"],"categories":["LifeStyle"]},"content":"\nAlmost every day for the past nine or so months has felt like March 13, and that can sometimes make it difficult to want to wake up for the day ahead of you.\n\nTo make a morning person out of you, the wake-up light simulates the sunrise to gradually ease you awake. This allows you to wake up more naturally rather than being jolted awake by the default iPhone alarm sound, which honestly triggers my fight or flight response.\n\n### Creative Design\n\nNam ut rutrum ex, venenatis sollicitudin urna. Aliquam erat volutpat. Integer eu ipsum sem. Ut bibendum lacus vestibulum maximus suscipit. Quisque vitae nibh iaculis neque blandit euismod.\n\n>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\n","slug":"post-6demo"}]