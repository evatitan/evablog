[{"frontmatter":{"title":"Javascript Operators for beginner","description":"programming operators","date":"2025-06-09T00:00:00.000Z","image":"/images/posts/jsoperators.jpg","categories":["programming"],"authors":["Evatitan"],"tags":["Javascript","operator"],"draft":false},"content":"\nProgramming operators are essentials for our daily coding activities. When I first started learning a programming language, I found it difficult to remember all the English terms, so I even took a maths course on Udemy to help me become more familiar with the symbols. While this was helpful, programming operators are not the same as mathematical symbols. Therefor I share this article with you in the hope that it will help you.\n\n## Operators list\n\n| Symbol         | Name                          | Description                                      |\n|----------------|-------------------------------|--------------------------------------------------|\n| `+`            |  Addition                     | Adds two values together  |\n| `-`            |  Subtraction                  | Subtract two values |\n| `*`            |  Multiplication               | Multiples two values           | \n| `/`            |  Division                     | Division of two or more values          |\n| `%`            |  Modulo (remainder)           | Returns the remainder after dividing of two values |\n| `**`           |  Exponentiation (ES6)         | Raises a value to the power of N            |\n| `++`           |  Increment                    | Adds 1 to a value every time             |\n| `--`           |  Decrement                    | Subtracts a value by 1 every time            |\n| `=`            |  Assign                       | Assign a value to a variable           |\n| `+=`           |  Add and assign               | Adds the value on the right to the variable on the left, then assigns the result back to the variable on the left |\n| `-=`           |  Subtract and assign          | Subtracts the value on the right from the variable on the left and assigns the result back to that variable             |\n| `*=`           |  Multiplication and assign    | Multiplies the value on the right by the variable on the left and assigns the result back to that variable             |\n| `/=`           |  Division and assign          | Divides the value on the right by the value on the left and assigns the result back to the variable on the left            |\n| `%=`           |  Modulo and assign            | Returns the result of the modulo operation between two values and assign it back to the variable            |\n| `**=`          |  Exponentiation assign        | Raises a variable to the power of a value and assigns the result back to the variable.             |\n| `==`           |  Loose equality               | Compares two values to see if they are equal          |\n| `!=`           |  Loose inequality             | Compares two values to see if they are not equal              |\n| `===`          |  Strict equality              | Compares two values and their type if they are equal           |\n| `!==`          |  Strict inequality            | Compares two values and types if they are not equal           |\n| `>`            |  Greater than                 | Returns the result of the comparison if the left value is greater than the right one          |\n| `<`            |  Smaller than                 | Returns the result after comparing if the left value is smaller than the right one             |\n| `>=`           |  Greater and equality         | Returns the result after comparing if the left value is greater or equal than the right one           |\n| `<=`           |  Smaller and equality         | Returns the result after comparing if the left value is smaller or equal than the right one              |\n| `&&`           |  AND                          | Returns true only when both sides are true        |\n| `\\|\\|`         |  OR                           | Returns true when one side is true               |\n| `!`            |  NOT                          | Returns the contract value           |\n| `? :`          | Ternary (conditional)         | Returns the first value if the condition is true; otherwise, returns the second value.            |\n| `&`            | Bitwise AND                   | Performs AND on each bit of two numbers          |\n| `\\|`           | Bitwise OR                    | Performs OR on each bit of two numbers           |\n| `...`          | Spread/rest                   | Expands or collects elements/arguments           |\n\n### Examples\n<details>\n<summary>Show Addition Example</summary>\n```js\nlet a = 5;\nlet b = 3;\nlet result = a + b; // result is 8\nconsole.log(result);\n```\n</details>\n\n<details>\n<summary>Show Subtraction Example</summary>\n```js\nlet a = 5;\nlet b = 3;\nlet result = a - b; // result is 2\nconsole.log(result);\n```\n</details>\n\n<details>\n<summary>Show Multiplication Example</summary>\n```js\nlet a = 5;\nlet b = 3;\nlet result = a * b; // result is 15\nconsole.log(result);\n```\n</details>\n\n<details>\n<summary>Show Division Example</summary>\n```js\nlet a = 9;\nlet b = 3;\nlet result = a / b; // result is 3\nconsole.log(result);\n```\n</details>\n\n<details>\n<summary>Show Modulo Example</summary>\n```js\nlet a = 9;\nlet b = 3;\nlet result = a % b; // result is 0\nconsole.log(result);\n```\n</details>\n\n<details>\n<summary>Show Exponentiation Example</summary>\n```js\nlet a = 9;\nlet b = 3;\nlet result = a ** b; // result is 729\nconsole.log(result);\n```\n</details>\n\n<details>\n<summary>Show increment Example</summary>\n```js\nlet a = 9;\nlet result = a++; // result is 9\nconsole.log(result);\n```\n</details>\n\n<details>\n<summary>Show decrement Example</summary>\n```js\nlet a = 9;\nlet result = a--; // result is 9\nconsole.log(result);\n```\n</details>\n\n<details>\n<summary>Show assign Example</summary>\n```js\nlet a = 9;   // result is 9\nconsole.log(result);\n```\n</details>\n\n<details>\n<summary>Show Add and assign Example</summary>\n```js\nlet a = 9;\na += 1; // this is equal to [a = a + 1],  a is 10\nconsole.log(a);\n```\n</details>\n\n<details>\n<summary>Show Subtract and assign Example</summary>\n```js\nlet a = 9;\na -= 1; // this is equal to [a = a - 1],  a is 8\nconsole.log(a);\n```\n</details>\n\n<details>\n<summary>Show Multiplicate and assign Example</summary>\n```js\nlet a = 9;\na *= 2; // this is equal to [a = a * 2],  a is 18\nconsole.log(a);\n```\n</details>\n\n<details>\n<summary>Show Division and assign Example</summary>\n```js\nlet a = 9;\na /= 3; // this is equal to [a = a / 3],  a is 3\nconsole.log(a);\n```\n</details>\n\n<details>\n<summary>Show Modulo and assign Example</summary>\n```js\nlet a = 9;\na %= 3; // this is equal to [a = a % 3],  a is 0\nconsole.log(a);\n```\n</details>\n\n<details>\n<summary>Show Exponentiation and assign Example</summary>\n```js\nlet a = 9;\na **= 3; // this is equal to [a ** 3],  a is 729\nconsole.log(a);\n```\n</details>\n\n<details>\n<summary>Show Loose equality Example</summary>\n```js\nlet a = 9;\nlet b = \"9\";\nconsole.log(a==b);  // true\n```\n</details>\n\n<details>\n<summary>Show loose inequality Example</summary>\n```js\nlet a = 9;\nlet b = 8;\nconsole.log(a!=b);  // true\n```\n</details>\n\n<details>\n<summary>Show Strict equality Example</summary>\n```js\nlet a = 9;\nlet b = \"9\";\nconsole.log(a===b);  // false\n```\n</details>\n\n<details>\n<summary>Show Strict inequality Example</summary>\n```js\nlet a = 9;\nlet b = 8;\nconsole.log(a!==b);  // true\n```\n</details>\n\n<details>\n<summary>Show Greater than Example</summary>\n```js\nlet a = 9;\nlet b = 8;\nconsole.log(a > b);  // true\n```\n</details>\n\n<details>\n<summary>Show Smaller than Example</summary>\n```js\nlet a = 9;\nlet b = 8;\nconsole.log(b < a);  // true\n```\n</details>\n\n<details>\n<summary>Show Greater and equal Example</summary>\n```js\nlet a = 9;\nlet b = 9;\nlet c = 8;\nconsole.log(a >= b);  // true\nconsole.log(a >= c);  // true\n```\n</details>\n\n<details>\n<summary>Show Smaller and equal Example</summary>\n```js\nlet a = 9;\nlet b = 9;\nlet c = 8;\nconsole.log(b <= a);  // true\nconsole.log(c <= a);  // true\n```\n</details>\n\n<details>\n<summary>Show ADD Example</summary>\n```js\nlet a = true;\nlet b = false;\nconsole.log( a && b );  // false\n```\n</details>\n\n<details>\n<summary>Show OR Example</summary>\n```js\nlet a = true;\nlet b = false;\nconsole.log( a || b );  // true\n```\n</details>\n\n<details>\n<summary>Show NOT Example</summary>\n```js\nlet a = true;\nconsole.log(!a);  // false\n```\n</details>\n\n<details>\n<summary>Show Ternary Example</summary>\n```js\nlet a = true;\nlet b = 1;\nlet c = 2;\nlet result = a ? b : c\nconsole.log(result); \n```\n</details>\n\n<details>\n<summary>Show Ternary Example</summary>\n```js\nlet a = true;\nlet b = 1;\nlet c = 2;\nlet result = a ? b : c\nconsole.log(result); \n```\n</details>\n\n<details>\n<summary>Show Bitwise AND Example</summary>\n```js\nlet a = 5;  // binary: 0101\nlet b = 3;  // binary: 0011\nlet result = a & b;  // result is 1 (binary: 0001)\nconsole.log(result);  // Output: 1\n```\n</details>\n\n<details>\n<summary>Show Bitwise OR Example</summary>\n```js\nlet a = 5;   // binary: 0101\nlet b = 3;   // binary: 0011\nlet result = a | b; // result is 7 (binary: 0111)\nconsole.log(result); // Output: 7\n```\n</details>\n\n<details>\n<summary>Show Spread/Rest Example</summary>\n```js\nlet a = [1,2,3]\nlet b = [...a, 4 , 5] // b is [1, 2, 3, 4, 5]\nconsole.log(b);\n```\n</details>\n\n\n\n## Others Operators List\n\n<details>\n<summary>Show List</summary>\n\nHere are some additional common JavaScript operators\n\n| Symbol         | Name                          | Description                                      |\n|----------------|-------------------------------|--------------------------------------------------|\n| `^`            | Bitwise XOR                   | Performs XOR on each bit of two numbers          |\n| `~`            | Bitwise NOT                   | Inverts each bit                                 |\n| `<<`           | Bitwise left shift            | Shifts bits to the left                          |\n| `>>`           | Bitwise right shift           | Shifts bits to the right                         |\n| `>>>`          | Bitwise unsigned right shift  | Shifts bits to the right, filling with zeros     |\n| `typeof`       | Type determination            | Returns the type of a variable                   |\n| `instanceof`   | Instance check                | Checks if object is an instance of a constructor |\n| `delete`       | Delete property               | Removes a property from an object                |\n| `void`         | Void                          | Evaluates expression and returns undefined       |\n| `new`          | Object instantiation          | Creates an instance of an object                 |\n| `in`           | Property existence            | Checks if property exists in an object           |\n\n</details>\n","slug":"post-1"},{"frontmatter":{"title":"Why a balloon is a flexible bag","description":"meta description","date":"2022-04-10T00:00:00.000Z","image":"/images/posts/02.jpg","categories":["development"],"authors":["John Doe"],"tags":["diy","toy"],"draft":true},"content":"\nNemo vel ad consectetur namut rutrum ex, venenatis sollicitudin urna. Aliquam erat volutpat. Integer eu ipsum sem. Ut bibendum lacus vestibulum maximus suscipit. Quisque vitae nibh iaculis neque blandit euismod.\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\n\n## Creative Design\n\nNam ut rutrum ex, venenatis sollicitudin urna. Aliquam erat volutpat. Integer eu ipsum sem. Ut bibendum lacus vestibulum maximus suscipit. Quisque vitae nibh iaculis neque blandit euismod.\n\n> Lorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\n","slug":"post-2demo"},{"frontmatter":{"title":"What you need to know about Photography","description":"meta description","date":"2022-06-02T00:00:00.000Z","image":"/images/posts/03.jpg","categories":["art"],"authors":["Mark Dinn"],"tags":["diy","toy"],"draft":true},"content":"\nNemo vel ad consectetur namut rutrum ex, venenatis sollicitudin urna. Aliquam erat volutpat. Integer eu ipsum sem. Ut bibendum lacus vestibulum maximus suscipit. Quisque vitae nibh iaculis neque blandit euismod.\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\n\n## Creative Design\n\nNam ut rutrum ex, venenatis sollicitudin urna. Aliquam erat volutpat. Integer eu ipsum sem. Ut bibendum lacus vestibulum maximus suscipit. Quisque vitae nibh iaculis neque blandit euismod.\n\n> Lorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\n","slug":"post-3demo"},{"frontmatter":{"title":"Why a balloon is a flexible bag that can be inflated with a gas","description":"meta description","image":"/images/posts/04.jpg","date":"2021-02-02T00:00:00.000Z","draft":true,"authors":["Mark Dinn"],"tags":["Balloon","Gas"],"categories":["Accessories"]},"content":"\nA balloon is a flexible bag that can be inflated with a gas, such as helium, hydrogen, nitrous oxide, oxygen, and air. For special tasks, balloons can be filled with smoke, liquid water, granular media, or light sources.\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\n\n### Creative Design\n\nNam ut rutrum ex, venenatis sollicitudin urna. Aliquam erat volutpat. Integer eu ipsum sem. Ut bibendum lacus vestibulum maximus suscipit. Quisque vitae nibh iaculis neque blandit euismod.\n\n>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\n","slug":"post-4demo"},{"frontmatter":{"title":"Banana is the best meal packages in the UK spark outrage online","description":"meta description","image":"/images/posts/05.jpg","date":"2021-01-25T00:00:00.000Z","draft":true,"authors":["John Doe"],"tags":["Food","Gold"],"categories":["Food"]},"content":"\nA banana is an elongated, edible fruit – botanically a berry – produced by several kinds of large herbaceous flowering plants in the genus Musa. In some countries, bananas used for cooking may be called \"plantains\", distinguishing them from dessert bananas.\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\n\n### Creative Design\n\nNam ut rutrum ex, venenatis sollicitudin urna. Aliquam erat volutpat. Integer eu ipsum sem. Ut bibendum lacus vestibulum maximus suscipit. Quisque vitae nibh iaculis neque blandit euismod.\n\n>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\n","slug":"post-5demo"},{"frontmatter":{"title":"Become a morning person with the help of this a alarm clock","description":"meta description","image":"/images/posts/06.jpg","date":"2021-02-03T00:00:00.000Z","draft":true,"authors":["Mark Dinn"],"tags":["Alarm","Clock"],"categories":["LifeStyle"]},"content":"\nAlmost every day for the past nine or so months has felt like March 13, and that can sometimes make it difficult to want to wake up for the day ahead of you.\n\nTo make a morning person out of you, the wake-up light simulates the sunrise to gradually ease you awake. This allows you to wake up more naturally rather than being jolted awake by the default iPhone alarm sound, which honestly triggers my fight or flight response.\n\n### Creative Design\n\nNam ut rutrum ex, venenatis sollicitudin urna. Aliquam erat volutpat. Integer eu ipsum sem. Ut bibendum lacus vestibulum maximus suscipit. Quisque vitae nibh iaculis neque blandit euismod.\n\n>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\n\nLorem ipsum dolor sit amet consectetur adipisicing elit. Nemo vel ad consectetur ut aperiam. Itaque eligendi natus aperiam? Excepturi repellendus consequatur quibusdam optio expedita praesentium est adipisci dolorem ut eius!\n","slug":"post-6demo"}]